require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AddressesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Address. As you add validations to Address, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { company_id: 1,
      name: 'My Address',
      body: 'My address body',
      post_code: 'ABC 123'}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AddressesController. Be sure to keep this updated too.
  def valid_session
    {"warden.user.user.key" => session["warden.user.user.key"]}.merge(return_to: addresses_index_path)
  end

  before do
        user = double('user')
        allow(request.env['warden']).to receive(:authenticate!).and_return(user)
        allow(controller).to receive(:current_user).and_return(user)
        # sign_in_user
        allow(user).to receive(:has_role?).and_return(true)
        # user.stub(:has_role?) do |role|
        #   if role == 'company'
        #     true
        #   end
        # end
        @company = FactoryGirl.create(:company)
        params = {}
        params[:company] = @company
  end
  describe "GET index" do
    it "assigns all addresses as @addresses" do
      address = Address.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:addresses)).to eq([address])
    end
  end

  describe "GET show" do
    it "assigns the requested address as @address" do
      address = Address.create! valid_attributes
      get :show, {company_id: @company, :id => address.to_param}, valid_session
      expect(assigns(:address)).to eq(address)
    end
  end

  describe "GET new" do
    it "assigns a new address as @address" do
      get :new, {company_id: @company}, valid_session
      expect(assigns(:address)).to be_a_new(Address)
    end
  end

  describe "GET edit" do
    it "assigns the requested address as @address" do
      address = Address.create! valid_attributes
      get :edit, {company_id: @company, :id => address.to_param}, valid_session
      # assigns(:address).should eq(address)
      expect(assigns(:address)).to eq(address)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Address" do
        expect {
          post :create, {company_id: @company, :address => valid_attributes}, valid_session
        }.to change(Address, :count).by(1)
      end

      it "assigns a newly created address as @address" do
        post :create, {company_id: @company, :address => valid_attributes}, valid_session
        expect(assigns(:address)).to be_a(Address)
        expect(assigns(:address)).to be_persisted
      end

      it "redirects to the calling page on create address" do
        post :create, {company_id: @company, :address => valid_attributes}, valid_session
        #response.should redirect_to(Address.last)
        expect(response).to redirect_to(addresses_index_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved address as @address" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        post :create, {company_id: @company, :address => { "company_id" => "invalid value" }}, valid_session
        expect(assigns(:address)).to be_a_new(Address)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        post :create, {company_id: @company, :address => { "company_id" => "invalid value" }}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested address" do
        address = Address.create! valid_attributes
        # Assuming there are no other addresses in the database, this
        # specifies that the Address created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        allow_any_instance_of(Address).to receive(:update_attributes).with({ "company_id" => "1" })
        put :update, {company_id: @company, :id => address.to_param, :address => { "company_id" => "1" }}, valid_session
      end

      it "assigns the requested address as @address" do
        address = Address.create! valid_attributes
        put :update, {company_id: @company, :id => address.to_param, :address => valid_attributes}, valid_session
        # assigns(:address).should eq(address)
        expect(assigns(:address)).to eq(address)
      end

      it "redirects to the calling page on update address" do
        address = Address.create! valid_attributes
        put :update, {company_id: @company, :id => address.to_param, :address => valid_attributes}, valid_session
        expect(response).to redirect_to(addresses_index_path)
      end
    end

    describe "with invalid params" do
      it "assigns the address as @address" do
        address = Address.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        put :update, {company_id: @company, :id => address.to_param, :address => { "company_id" => "invalid value" }}, valid_session
        expect(assigns(:address)).to eq(address)
      end

      it "re-renders the 'edit' template" do
        address = Address.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        put :update, {company_id: @company, :id => address.to_param, :address => { "company_id" => "invalid value" }}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before do
      # controller.request.stub(:referer).and_return addresses_index_path
      allow(controller.request).to receive(:referer).and_return(addresses_index_path)
    end

    it "destroys the requested address" do
      address = Address.create! valid_attributes
      expect {
        delete :destroy, {company_id: @company, :id => address.to_param}, valid_session
      }.to change(Address, :count).by(-1)
    end

    it "redirects to the calling page" do
      address = Address.create! valid_attributes
      delete :destroy, {company_id: @company, :id => address.to_param}, valid_session
      # response.should redirect_to(addresses_index_path)
      expect(response).to redirect_to(addresses_index_path)
    end

    it "does not delete if contacts still use the address" do
      address = Address.create! valid_attributes
      contact = Contact.create! address_id: address.id, name: 'address contact', company_id: 1
      expect {
        delete :destroy, {company_id: @company, :id => address.to_param}, valid_session
      }.to_not change(Address, :count)
    end
  end

end
